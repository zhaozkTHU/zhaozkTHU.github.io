<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ZhaoZK&#39;s Personal Blog</title>
  
  <subtitle>ZhaoZk&#39;s Blog</subtitle>
  <link href="http://zhaozekai.com/atom.xml" rel="self"/>
  
  <link href="http://zhaozekai.com/"/>
  <updated>2022-05-14T00:17:55.393Z</updated>
  <id>http://zhaozekai.com/</id>
  
  <author>
    <name>Zhao Zekai</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>迭代器</title>
    <link href="http://zhaozekai.com/uncategorized/%E8%BF%AD%E4%BB%A3%E5%99%A8/"/>
    <id>http://zhaozekai.com/uncategorized/%E8%BF%AD%E4%BB%A3%E5%99%A8/</id>
    <published>2022-05-14T00:06:56.000Z</published>
    <updated>2022-05-14T00:17:55.393Z</updated>
    
    <content type="html"><![CDATA[<p><strong>自定义迭代器</strong>:</p><ul><li><code>iterator begin()</code></li><li><code>iterator end()</code>  //begin()与end()在迭代器外、将要迭代的类内定义</li><li><code>iterator operator++()</code> //前缀运算符</li><li><code>iterator operator*()</code> 解引用</li><li><code>bool operator!=(iterator)</code></li><li><code>bool operator==(iterator)</code></li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">"dataloader.hpp"</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;fstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;sstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><br><span class="hljs-function">string <span class="hljs-title">matrix_unicode</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; mat)</span></span>{<br>    <span class="hljs-comment">// this is a function to check print batch data for answer checking</span><br>    string unicode = <span class="hljs-string">"["</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> row : mat){<br>        unicode += <span class="hljs-string">"["</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> elem : row){<br>            unicode += std::<span class="hljs-built_in">to_string</span>(elem)+<span class="hljs-string">","</span>;<br>        }<br>        unicode.<span class="hljs-built_in">erase</span>(unicode.<span class="hljs-built_in">end</span>()<span class="hljs-number">-1</span>);<br>        unicode += <span class="hljs-string">"],"</span>;<br>    }<br>    unicode.<span class="hljs-built_in">erase</span>(unicode.<span class="hljs-built_in">end</span>()<span class="hljs-number">-1</span>);<br>    unicode+=<span class="hljs-string">"]"</span>;<br>    <span class="hljs-keyword">return</span> unicode;<br>}<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>{<br>    <span class="hljs-type">int</span> N, NUM_EPOCH, BATCH_SIZE;<br>    cin &gt;&gt; N;<br><br>    Vocabulary V;<br>    DataLoader D;<br>    cin.<span class="hljs-built_in">get</span>();<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;N; i++){<br>        string sentence;<br>        <span class="hljs-built_in">getline</span>(cin, sentence);<br>        D.<span class="hljs-built_in">addData</span>(V.<span class="hljs-built_in">insertSentReturnIds</span>(sentence));<br>    }<br><br>    cin &gt;&gt; NUM_EPOCH;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;NUM_EPOCH; i++){<br>        cin &gt;&gt; BATCH_SIZE;<br>        vector&lt;<span class="hljs-type">int</span>&gt; random_order;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;N;j++){<br>            <span class="hljs-type">int</span> tmp;<br>            cin &gt;&gt; tmp;<br>            random_order.<span class="hljs-built_in">push_back</span>(tmp);<br>        }<br>        D.<span class="hljs-built_in">setOrder</span>(random_order);<br>        D.<span class="hljs-built_in">setBatchSize</span>(BATCH_SIZE);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> batch : D){ <span class="hljs-comment">//此处会自动调用D的迭代器</span><br>            string str = <span class="hljs-built_in">matrix_unicode</span>(batch);<br>            cout&lt;&lt; str &lt;&lt;endl;<br>        }<br>    }<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;sstream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Vocabulary</span><br>{<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-comment">// Choose a proper container from STL.</span><br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> id;<br>    map&lt;string, <span class="hljs-type">int</span>&gt; voc;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">insertSentReturnIds</span><span class="hljs-params">(string sentence)</span></span>{<br>        vector&lt;<span class="hljs-type">int</span>&gt; returnvalue;<br>        <span class="hljs-function">istringstream <span class="hljs-title">str</span><span class="hljs-params">(sentence)</span></span>;<br>        vector&lt;string&gt; words;<br>        string word;<br>        <span class="hljs-keyword">while</span>(str &gt;&gt; word) {<br>            <span class="hljs-keyword">if</span>(voc.<span class="hljs-built_in">count</span>(word) == <span class="hljs-number">0</span>) {<br>                voc[word] = id;<br>                id++;<br>            }<br>            returnvalue.<span class="hljs-built_in">push_back</span>(voc[word]);<br>        }<br>        <span class="hljs-keyword">return</span> returnvalue;<br>    }<br>};<br><span class="hljs-type">int</span> Vocabulary::id = <span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DataLoader</span>{<br><span class="hljs-keyword">private</span>:<br>    vector&lt;<span class="hljs-type">int</span>&gt; _rand_order;<br>    <span class="hljs-type">int</span> batch_size=<span class="hljs-number">0</span>;<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; sentences;<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; sorted;<br>    vector&lt;vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&gt; _result; <span class="hljs-comment">//batch_size赋值时进行操作，迭代器对此进行迭代</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setBatchSize</span><span class="hljs-params">(<span class="hljs-type">int</span> N)</span> </span>{<br>        <span class="hljs-keyword">this</span>-&gt;batch_size = N; <br>        <span class="hljs-type">int</span> a;<br>        <span class="hljs-keyword">if</span> (sentences.<span class="hljs-built_in">size</span>() % batch_size == <span class="hljs-number">0</span>) a = sentences.<span class="hljs-built_in">size</span>() / batch_size;<br>        <span class="hljs-keyword">else</span> a = (sentences.<span class="hljs-built_in">size</span>() - sentences.<span class="hljs-built_in">size</span>() % batch_size) / batch_size + <span class="hljs-number">1</span>;<br>        _result = vector&lt;vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&gt;(a);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; sentences.<span class="hljs-built_in">size</span>(); i++) {<br>            _result[i / batch_size].<span class="hljs-built_in">push_back</span>(sorted[i]);<br>        }<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; _result.<span class="hljs-built_in">size</span>(); i++) {<br>            <span class="hljs-type">int</span> maxn = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; _result[i].<span class="hljs-built_in">size</span>(); j++) {<br>                <span class="hljs-keyword">if</span>(_result[i][j].<span class="hljs-built_in">size</span>() &gt; maxn) maxn = _result[i][j].<span class="hljs-built_in">size</span>();<br>            }<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; _result[i].<span class="hljs-built_in">size</span>(); j++) {<br>                <span class="hljs-type">int</span> a = _result[i][j].<span class="hljs-built_in">size</span>();<br>                <span class="hljs-keyword">if</span>(_result[i][j].<span class="hljs-built_in">size</span>() &lt; maxn) {<br>                    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; maxn - a; k++)<br>                        _result[i][j].<span class="hljs-built_in">push_back</span>(<span class="hljs-number">0</span>);<br>                }<br>            }<br>        }<br>    }<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setOrder</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; x)</span> </span>{<br>        _rand_order = x;<br>        sorted.<span class="hljs-built_in">clear</span>();<br>        _result.<span class="hljs-built_in">clear</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; sentences.<span class="hljs-built_in">size</span>(); i++) {<br>            sorted.<span class="hljs-built_in">push_back</span>(sentences[_rand_order[i]]);<br>        }<br>    }<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addData</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; sent_encoding)</span> </span>{<br>        sentences.<span class="hljs-built_in">push_back</span>(sent_encoding);<br>    }<br><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Iterator</span><br>    {<br>        <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>!= (Iterator other) <span class="hljs-type">const</span> {<span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>-&gt;begin != other.begin;}<br>        <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>== (Iterator other) <span class="hljs-type">const</span> {<span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>-&gt;begin == other.begin;}<br>        <span class="hljs-built_in">Iterator</span>(vector&lt;vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&gt;::iterator b) : <span class="hljs-built_in">begin</span>(b) {}<br>        Iterator <span class="hljs-keyword">operator</span>++() {<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">Iterator</span>(begin++);<br>        }<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-keyword">operator</span>* () {<br>            <span class="hljs-keyword">return</span> *begin;<br>        }<br><br>    <span class="hljs-keyword">private</span>:<br>        vector&lt;vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&gt;::iterator begin;<br>    };<br><br>    <span class="hljs-function">Iterator <span class="hljs-title">begin</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">Iterator</span>(_result.<span class="hljs-built_in">begin</span>());<br>    }<br>    <span class="hljs-function">Iterator <span class="hljs-title">end</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">Iterator</span>(_result.<span class="hljs-built_in">end</span>());<br>    }<br>};<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;自定义迭代器&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;iterator begin()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;iterator end()&lt;/code&gt;  //begin()与end()在迭代器外、将要迭代的类内定义&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>string分割为单词</title>
    <link href="http://zhaozekai.com/uncategorized/string%E5%88%86%E5%89%B2%E4%B8%BA%E5%8D%95%E8%AF%8D/"/>
    <id>http://zhaozekai.com/uncategorized/string%E5%88%86%E5%89%B2%E4%B8%BA%E5%8D%95%E8%AF%8D/</id>
    <published>2022-05-12T02:38:19.000Z</published>
    <updated>2022-05-12T02:43:31.987Z</updated>
    
    <content type="html"><![CDATA[<p><code>#include&lt;sstring&gt;</code>需要头文件</p><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;sstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    string sentence;<br>    <span class="hljs-built_in">getline</span>(cin, sentence);<br>    <span class="hljs-function">istringstream <span class="hljs-title">str</span><span class="hljs-params">(sentence)</span></span>;<br>    vector&lt;string&gt; words;<br>    string word;<br>    <span class="hljs-keyword">while</span>(str &gt;&gt; word)<br>        words.<span class="hljs-built_in">push_back</span>(word);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> a : words) cout &lt;&lt; a &lt;&lt; endl;<br>}<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;#include&amp;lt;sstring&amp;gt;&lt;/code&gt;需要头文件&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs c++&quot;&gt;&lt;span</summary>
      
    
    
    
    
  </entry>
  
</feed>
